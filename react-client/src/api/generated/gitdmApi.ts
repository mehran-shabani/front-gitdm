// AUTO-GENERATED BY ORVAL. DO NOT EDIT.
// Run: npm run api:generate
import type {
  AISummary,
  AISummaryList,
  ClinicalReference,
  CreateAISummary,
  Encounter,
  LabResult,
  MedicationOrder,
  PatchedAISummary,
  PatchedClinicalReference,
  PatchedEncounter,
  PatchedLabResult,
  PatchedMedicationOrder,
  PatchedPatient,
  Patient,
  RegenerateAISummary,
  TokenObtainPair,
  TokenRefresh
} from './gitdmApi.schemas'
import { createAxiosInstance } from '../http/axios-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;



  export const getGitdmApi = () => {
/**
 * List all AI summaries with optional filtering by patient
 * @summary List AI summaries
 */
const apiAiSummariesList = (
    
 ) => {
      return createAxiosInstance<AISummaryList[]>(
      {url: `/api/ai-summaries`, method: 'GET'
    },
      );
    }
  
/**
 * Create a new AI summary using GapGPT/OpenAI
 * @summary Create AI summary
 */
const apiAiSummariesCreate = (
    createAISummary: CreateAISummary,
 ) => {
      return createAxiosInstance<CreateAISummary>(
      {url: `/api/ai-summaries`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createAISummary
    },
      );
    }
  
/**
 * Retrieve a specific AI summary by ID
 * @summary Get AI summary
 */
const apiAiSummariesRetrieve = (
    id: number,
 ) => {
      return createAxiosInstance<AISummary>(
      {url: `/api/ai-summaries/${id}`, method: 'GET'
    },
      );
    }
  
/**
 * ViewSet for AI summaries with GapGPT/OpenAI integration
 * @summary Update AI summary
 */
const apiAiSummariesUpdate = (
    id: number,
    aISummary: NonReadonly<AISummary>,
 ) => {
      return createAxiosInstance<AISummary>(
      {url: `/api/ai-summaries/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: aISummary
    },
      );
    }
  
/**
 * ViewSet for AI summaries with GapGPT/OpenAI integration
 * @summary Partially update AI summary
 */
const apiAiSummariesPartialUpdate = (
    id: number,
    patchedAISummary: NonReadonly<PatchedAISummary>,
 ) => {
      return createAxiosInstance<AISummary>(
      {url: `/api/ai-summaries/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedAISummary
    },
      );
    }
  
/**
 * Delete an AI summary
 * @summary Delete AI summary
 */
const apiAiSummariesDestroy = (
    id: number,
 ) => {
      return createAxiosInstance<void>(
      {url: `/api/ai-summaries/${id}`, method: 'DELETE'
    },
      );
    }
  
/**
 * Regenerate AI summary for existing record with new content
 * @summary Regenerate AI summary
 */
const apiAiSummariesRegenerateCreate = (
    id: number,
    regenerateAISummary: RegenerateAISummary,
 ) => {
      return createAxiosInstance<AISummary>(
      {url: `/api/ai-summaries/${id}/regenerate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: regenerateAISummary
    },
      );
    }
  
/**
 * Get statistics about AI summaries
 * @summary Get summary statistics
 */
const apiAiSummariesStatsRetrieve = (
    
 ) => {
      return createAxiosInstance<AISummary>(
      {url: `/api/ai-summaries/stats`, method: 'GET'
    },
      );
    }
  
/**
 * Test the AI service connection and generate a simple summary
 * @summary Test AI service
 */
const apiAiSummariesTestCreate = (
    aISummary: NonReadonly<AISummary>,
 ) => {
      return createAxiosInstance<AISummary>(
      {url: `/api/ai-summaries/test`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: aISummary
    },
      );
    }
  
/**
 * Test the clinical references linking function with sample text
 * @summary Test clinical references linking
 */
const apiAiSummariesTestReferencesCreate = (
    aISummary: NonReadonly<AISummary>,
 ) => {
      return createAxiosInstance<AISummary>(
      {url: `/api/ai-summaries/test-references`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: aISummary
    },
      );
    }
  
/**
 * Takes a set of user credentials and returns an access and refresh JSON web
token pair to prove the authentication of those credentials.
 * @summary Obtain JWT token pair
 */
const apiApiTokenCreate = (
    tokenObtainPair: NonReadonly<TokenObtainPair>,
 ) => {
      return createAxiosInstance<TokenObtainPair>(
      {url: `/api/api/token`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: tokenObtainPair
    },
      );
    }
  
/**
 * Takes a refresh type JSON web token and returns an access type JSON web
token if the refresh token is valid.
 * @summary Refresh JWT access token
 */
const apiApiTokenRefreshCreate = (
    tokenRefresh: NonReadonly<TokenRefresh>,
 ) => {
      return createAxiosInstance<TokenRefresh>(
      {url: `/api/api/token/refresh`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: tokenRefresh
    },
      );
    }
  
/**
 * @summary List encounters
 */
const apiEncountersList = (
    
 ) => {
      return createAxiosInstance<Encounter[]>(
      {url: `/api/encounters`, method: 'GET'
    },
      );
    }
  
/**
 * @summary Create encounter
 */
const apiEncountersCreate = (
    encounter: NonReadonly<Encounter>,
 ) => {
      return createAxiosInstance<Encounter>(
      {url: `/api/encounters`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: encounter
    },
      );
    }
  
/**
 * @summary Get encounter
 */
const apiEncountersRetrieve = (
    id: number,
 ) => {
      return createAxiosInstance<Encounter>(
      {url: `/api/encounters/${id}`, method: 'GET'
    },
      );
    }
  
/**
 * @summary Update encounter
 */
const apiEncountersUpdate = (
    id: number,
    encounter: NonReadonly<Encounter>,
 ) => {
      return createAxiosInstance<Encounter>(
      {url: `/api/encounters/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: encounter
    },
      );
    }
  
/**
 * @summary Partially update encounter
 */
const apiEncountersPartialUpdate = (
    id: number,
    patchedEncounter: NonReadonly<PatchedEncounter>,
 ) => {
      return createAxiosInstance<Encounter>(
      {url: `/api/encounters/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedEncounter
    },
      );
    }
  
/**
 * @summary Delete encounter
 */
const apiEncountersDestroy = (
    id: number,
 ) => {
      return createAxiosInstance<void>(
      {url: `/api/encounters/${id}`, method: 'DELETE'
    },
      );
    }
  
/**
 * @summary List lab results
 */
const apiLabsList = (
    
 ) => {
      return createAxiosInstance<LabResult[]>(
      {url: `/api/labs`, method: 'GET'
    },
      );
    }
  
/**
 * @summary Create lab result
 */
const apiLabsCreate = (
    labResult: NonReadonly<LabResult>,
 ) => {
      return createAxiosInstance<LabResult>(
      {url: `/api/labs`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: labResult
    },
      );
    }
  
/**
 * @summary Get lab result
 */
const apiLabsRetrieve = (
    id: number,
 ) => {
      return createAxiosInstance<LabResult>(
      {url: `/api/labs/${id}`, method: 'GET'
    },
      );
    }
  
/**
 * @summary Update lab result
 */
const apiLabsUpdate = (
    id: number,
    labResult: NonReadonly<LabResult>,
 ) => {
      return createAxiosInstance<LabResult>(
      {url: `/api/labs/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: labResult
    },
      );
    }
  
/**
 * @summary Partially update lab result
 */
const apiLabsPartialUpdate = (
    id: number,
    patchedLabResult: NonReadonly<PatchedLabResult>,
 ) => {
      return createAxiosInstance<LabResult>(
      {url: `/api/labs/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedLabResult
    },
      );
    }
  
/**
 * @summary Delete lab result
 */
const apiLabsDestroy = (
    id: number,
 ) => {
      return createAxiosInstance<void>(
      {url: `/api/labs/${id}`, method: 'DELETE'
    },
      );
    }
  
/**
 * @summary List medication orders
 */
const apiMedsList = (
    
 ) => {
      return createAxiosInstance<MedicationOrder[]>(
      {url: `/api/meds`, method: 'GET'
    },
      );
    }
  
/**
 * @summary Create medication order
 */
const apiMedsCreate = (
    medicationOrder: NonReadonly<MedicationOrder>,
 ) => {
      return createAxiosInstance<MedicationOrder>(
      {url: `/api/meds`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: medicationOrder
    },
      );
    }
  
/**
 * @summary Get medication order
 */
const apiMedsRetrieve = (
    id: number,
 ) => {
      return createAxiosInstance<MedicationOrder>(
      {url: `/api/meds/${id}`, method: 'GET'
    },
      );
    }
  
/**
 * @summary Update medication order
 */
const apiMedsUpdate = (
    id: number,
    medicationOrder: NonReadonly<MedicationOrder>,
 ) => {
      return createAxiosInstance<MedicationOrder>(
      {url: `/api/meds/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: medicationOrder
    },
      );
    }
  
/**
 * @summary Partially update medication order
 */
const apiMedsPartialUpdate = (
    id: number,
    patchedMedicationOrder: NonReadonly<PatchedMedicationOrder>,
 ) => {
      return createAxiosInstance<MedicationOrder>(
      {url: `/api/meds/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedMedicationOrder
    },
      );
    }
  
/**
 * @summary Delete medication order
 */
const apiMedsDestroy = (
    id: number,
 ) => {
      return createAxiosInstance<void>(
      {url: `/api/meds/${id}`, method: 'DELETE'
    },
      );
    }
  
/**
 * @summary List patients
 */
const apiPatientsList = (
    
 ) => {
      return createAxiosInstance<Patient[]>(
      {url: `/api/patients`, method: 'GET'
    },
      );
    }
  
/**
 * @summary Create patient
 */
const apiPatientsCreate = (
    patient: NonReadonly<Patient>,
 ) => {
      return createAxiosInstance<Patient>(
      {url: `/api/patients`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: patient
    },
      );
    }
  
/**
 * @summary Get patient
 */
const apiPatientsRetrieve = (
    id: number,
 ) => {
      return createAxiosInstance<Patient>(
      {url: `/api/patients/${id}`, method: 'GET'
    },
      );
    }
  
/**
 * @summary Update patient
 */
const apiPatientsUpdate = (
    id: number,
    patient: NonReadonly<Patient>,
 ) => {
      return createAxiosInstance<Patient>(
      {url: `/api/patients/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: patient
    },
      );
    }
  
/**
 * @summary Partially update patient
 */
const apiPatientsPartialUpdate = (
    id: number,
    patchedPatient: NonReadonly<PatchedPatient>,
 ) => {
      return createAxiosInstance<Patient>(
      {url: `/api/patients/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedPatient
    },
      );
    }
  
/**
 * @summary Delete patient
 */
const apiPatientsDestroy = (
    id: number,
 ) => {
      return createAxiosInstance<void>(
      {url: `/api/patients/${id}`, method: 'DELETE'
    },
      );
    }
  
/**
 * تایم‌لاین تجمیع‌شده یک بیمار را برمی‌گرداند، شامل مواجهات بالینی، نتایج آزمایش، دستورهای دارویی و خلاصه‌های تولیدشده توسط زیرسیستم هوش‌مصنوعی.

جزئیات:
- این اکشن برای یک بیمار مشخص (بر پایه pk/URL) اجرا می‌شود و مجموعه‌های مرتبط را جداگانه واکشی و سریالایز می‌کند.
- محدودیت‌ها:
- پارامتر کوئری `limit` تعیین‌کننده حداکثر تعداد آیتم‌ها برای هر یک از نوع‌های Encounter، LabResult و MedicationOrder است. مقدار پیش‌فرض 100 و بیشینه مجاز 500 است (اگر مقدار بزرگ‌تر ارسال شود به 500 تقلیل می‌یابد).
- AISummaryها مستقل از `limit` همواره تا 5 مورد اخیر (بر اساس `created_at` نزولی) محدود می‌شوند.
- داده‌های بازگردانده شده:
- patient: داده سریالایزشدهٔ بیمار
- encounters: لیست سریالایزشدهٔ Encounterها مرتب‌شده بر اساس `occured_at` نزولی (تا `limit`)
- labs: لیست سریالایزشدهٔ LabResultها مرتب‌شده بر اساس `taken_at` نزولی (تا `limit`)
- medications: لیست سریالایزشدهٔ MedicationOrderها مرتب‌شده بر اساس `start_date` نزولی (تا `limit`)
- ai_summaries: لیست سریالایزشدهٔ AISummaryها (حداکثر 5 مورد، مرتب بر اساس `created_at` نزولی)

نکات مرتبط با هوش‌مصنوعی و پردازش:
- AISummaryها خروجی‌های تحلیلی/خلاصه‌سازی هستند که ممکن است بر پایه پردازش‌های خودکار، مدل‌های زبانی یا آنالیزهای بالینی تولید شده باشند؛ این موارد مکمل داده‌های خام بالینی هستند و برای نمایش خلاصهٔ وضعیت یا نکات مهم بیمار ارائه می‌شوند.
- این اکشن صرفاً خواندن و سریالایز کردن رکوردهای AISummary را انجام می‌دهد و هیچ پردازش یا اجرای تسک ضمنی (مثل فراخوانی مدل یا ایجاد وظیفه پس‌زمینه) را راه‌اندازی نمی‌کند؛ اگر نیاز به تولید یا به‌روزرسانی خلاصه‌های هوش‌مصنوعی باشد، آن عملیات باید از مسیرهای جداگانه مدیریت شود.

عوارض جانبی و خطاها:
- خود تابع داده‌ها را تغییر نمی‌دهد؛ در صورت نبودن دسترسی یا وجود خطا در بازیابی آبجکت بیمار، خطاهای مربوط به permissions یا 404 توسط متدهای پایهٔ ViewSet/DRF تولید می‌شوند.
 * @summary Get patient timeline
 */
const apiPatientsTimelineRetrieve = (
    id: number,
 ) => {
      return createAxiosInstance<Patient>(
      {url: `/api/patients/${id}/timeline`, method: 'GET'
    },
      );
    }
  
/**
 * @summary List clinical references
 */
const apiRefsList = (
    
 ) => {
      return createAxiosInstance<ClinicalReference[]>(
      {url: `/api/refs`, method: 'GET'
    },
      );
    }
  
/**
 * @summary Create clinical reference
 */
const apiRefsCreate = (
    clinicalReference: NonReadonly<ClinicalReference>,
 ) => {
      return createAxiosInstance<ClinicalReference>(
      {url: `/api/refs`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: clinicalReference
    },
      );
    }
  
/**
 * @summary Get clinical reference
 */
const apiRefsRetrieve = (
    id: number,
 ) => {
      return createAxiosInstance<ClinicalReference>(
      {url: `/api/refs/${id}`, method: 'GET'
    },
      );
    }
  
/**
 * @summary Update clinical reference
 */
const apiRefsUpdate = (
    id: number,
    clinicalReference: NonReadonly<ClinicalReference>,
 ) => {
      return createAxiosInstance<ClinicalReference>(
      {url: `/api/refs/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: clinicalReference
    },
      );
    }
  
/**
 * @summary Partially update clinical reference
 */
const apiRefsPartialUpdate = (
    id: number,
    patchedClinicalReference: NonReadonly<PatchedClinicalReference>,
 ) => {
      return createAxiosInstance<ClinicalReference>(
      {url: `/api/refs/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedClinicalReference
    },
      );
    }
  
/**
 * @summary Delete clinical reference
 */
const apiRefsDestroy = (
    id: number,
 ) => {
      return createAxiosInstance<void>(
      {url: `/api/refs/${id}`, method: 'DELETE'
    },
      );
    }
  
/**
 * Takes a set of user credentials and returns an access and refresh JSON web
token pair to prove the authentication of those credentials.
 * @summary Obtain JWT token pair
 */
const apiTokenCreate = (
    tokenObtainPair: NonReadonly<TokenObtainPair>,
 ) => {
      return createAxiosInstance<TokenObtainPair>(
      {url: `/api/token`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: tokenObtainPair
    },
      );
    }
  
/**
 * Takes a refresh type JSON web token and returns an access type JSON web
token if the refresh token is valid.
 * @summary Refresh JWT access token
 */
const apiTokenRefreshCreate = (
    tokenRefresh: NonReadonly<TokenRefresh>,
 ) => {
      return createAxiosInstance<TokenRefresh>(
      {url: `/api/token/refresh`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: tokenRefresh
    },
      );
    }
  
/**
 * @summary Get resource versions
 */
const apiVersionsRetrieve = (
    resourceType: string,
    resourceId: string,
 ) => {
      return createAxiosInstance<void>(
      {url: `/api/versions/${resourceType}/${resourceId}`, method: 'GET'
    },
      );
    }
  
/**
 * @summary Revert resource to previous version
 */
const apiVersionsRevertCreate = (
    resourceType: string,
    resourceId: string,
 ) => {
      return createAxiosInstance<void>(
      {url: `/api/versions/${resourceType}/${resourceId}/revert`, method: 'POST'
    },
      );
    }
  
return {apiAiSummariesList,apiAiSummariesCreate,apiAiSummariesRetrieve,apiAiSummariesUpdate,apiAiSummariesPartialUpdate,apiAiSummariesDestroy,apiAiSummariesRegenerateCreate,apiAiSummariesStatsRetrieve,apiAiSummariesTestCreate,apiAiSummariesTestReferencesCreate,apiApiTokenCreate,apiApiTokenRefreshCreate,apiEncountersList,apiEncountersCreate,apiEncountersRetrieve,apiEncountersUpdate,apiEncountersPartialUpdate,apiEncountersDestroy,apiLabsList,apiLabsCreate,apiLabsRetrieve,apiLabsUpdate,apiLabsPartialUpdate,apiLabsDestroy,apiMedsList,apiMedsCreate,apiMedsRetrieve,apiMedsUpdate,apiMedsPartialUpdate,apiMedsDestroy,apiPatientsList,apiPatientsCreate,apiPatientsRetrieve,apiPatientsUpdate,apiPatientsPartialUpdate,apiPatientsDestroy,apiPatientsTimelineRetrieve,apiRefsList,apiRefsCreate,apiRefsRetrieve,apiRefsUpdate,apiRefsPartialUpdate,apiRefsDestroy,apiTokenCreate,apiTokenRefreshCreate,apiVersionsRetrieve,apiVersionsRevertCreate}};
export type ApiAiSummariesListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiAiSummariesList']>>>
export type ApiAiSummariesCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiAiSummariesCreate']>>>
export type ApiAiSummariesRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiAiSummariesRetrieve']>>>
export type ApiAiSummariesUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiAiSummariesUpdate']>>>
export type ApiAiSummariesPartialUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiAiSummariesPartialUpdate']>>>
export type ApiAiSummariesDestroyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiAiSummariesDestroy']>>>
export type ApiAiSummariesRegenerateCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiAiSummariesRegenerateCreate']>>>
export type ApiAiSummariesStatsRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiAiSummariesStatsRetrieve']>>>
export type ApiAiSummariesTestCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiAiSummariesTestCreate']>>>
export type ApiAiSummariesTestReferencesCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiAiSummariesTestReferencesCreate']>>>
export type ApiApiTokenCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiApiTokenCreate']>>>
export type ApiApiTokenRefreshCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiApiTokenRefreshCreate']>>>
export type ApiEncountersListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiEncountersList']>>>
export type ApiEncountersCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiEncountersCreate']>>>
export type ApiEncountersRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiEncountersRetrieve']>>>
export type ApiEncountersUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiEncountersUpdate']>>>
export type ApiEncountersPartialUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiEncountersPartialUpdate']>>>
export type ApiEncountersDestroyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiEncountersDestroy']>>>
export type ApiLabsListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiLabsList']>>>
export type ApiLabsCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiLabsCreate']>>>
export type ApiLabsRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiLabsRetrieve']>>>
export type ApiLabsUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiLabsUpdate']>>>
export type ApiLabsPartialUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiLabsPartialUpdate']>>>
export type ApiLabsDestroyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiLabsDestroy']>>>
export type ApiMedsListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiMedsList']>>>
export type ApiMedsCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiMedsCreate']>>>
export type ApiMedsRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiMedsRetrieve']>>>
export type ApiMedsUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiMedsUpdate']>>>
export type ApiMedsPartialUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiMedsPartialUpdate']>>>
export type ApiMedsDestroyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiMedsDestroy']>>>
export type ApiPatientsListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiPatientsList']>>>
export type ApiPatientsCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiPatientsCreate']>>>
export type ApiPatientsRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiPatientsRetrieve']>>>
export type ApiPatientsUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiPatientsUpdate']>>>
export type ApiPatientsPartialUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiPatientsPartialUpdate']>>>
export type ApiPatientsDestroyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiPatientsDestroy']>>>
export type ApiPatientsTimelineRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiPatientsTimelineRetrieve']>>>
export type ApiRefsListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiRefsList']>>>
export type ApiRefsCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiRefsCreate']>>>
export type ApiRefsRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiRefsRetrieve']>>>
export type ApiRefsUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiRefsUpdate']>>>
export type ApiRefsPartialUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiRefsPartialUpdate']>>>
export type ApiRefsDestroyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiRefsDestroy']>>>
export type ApiTokenCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiTokenCreate']>>>
export type ApiTokenRefreshCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiTokenRefreshCreate']>>>
export type ApiVersionsRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiVersionsRetrieve']>>>
export type ApiVersionsRevertCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGitdmApi>['apiVersionsRevertCreate']>>>
